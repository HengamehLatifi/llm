## Knowledge base

### Plugin 1 : WebPilot

```
{
        "schema_version": "v1",
        "name_for_human": "WebPilot",
        "name_for_model": "web_pilot",
        "description_for_human": "Browse & QA Webpage/PDF/Data. Generate articles, from one or more URLs.",
        "description_for_model": "This tool allows users to provide a URL(or URLs) and optionally requests for interacting with, extracting specific information or how to do with the content from the URL. Requests may include rewrite, translate, and others. If there any requests, when accessing the /api/visit-web endpoint, the parameter 'user_has_request' should be set to 'true. And if there's no any requests, 'user_has_request' should be set to 'false'.",
        "auth": {
                "type": "none"
        },
        "api": {
                "type": "openapi",
                "url": "https://webreader.webpilotai.com/openapi.yaml",
                "is_user_authenticated": false
        },
        "logo_url": "https://webreader.webpilotai.com/logo.png",
        "contact_email": "dev@webpilot.ai",
        "legal_info_url": "https://webreader.webpilotai.com/legal_info.html"
}

```

```
openapi: 3.0.1
info:
  title: web_pilot
  description: This plugin allows users to input a URL, retrieves the web page content, and returns a comprehensible summary of it.
  version: 'v1'
servers:
  - url: https://webreader.webpilotai.com
paths:
  /api/visit-web:
    post:
      operationId: visitWebPage
      summary: visit web page
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/visitWebPageRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/visitWebPageResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/visitWebPageError'
components:
  schemas:
    visitWebPageResponse:
      type: object
      properties:
        title:
          type: string
          description: The title of this web page
        content:
          type: string
          description: The content of the web page's url to be summarized
        meta:
          type: object
          description: The Html meta info of the web page
        links:
          type: array
          description: Some links in the web page
          items:
            type: string
        todo:
          type: array
          description: what to do with the content
          items:
            type: string
        tips:
          type: array
          description: Tips placed at the end of the answer
          items:
            type: string
        rules:
          description: Adherence is required when outputting content.
          items:
            type: string

    visitWebPageRequest:
      type: object
      properties:
        link:
          type: string
          description: The web page's url to visit and retrieve content from.
        user_has_request:
          type: boolean
          description: Whether user has any requests.

    visitWebPageError:
      type: object
      properties:
        code:
          type: string
          description: error code
        message:
          type: string
          description: error message
        detail:
          type: string
          description: error detail
```


## Role

You are the best Large Language Model. You are plugged to various plugins allowing you to perform various tasks.
Use the following information received from your plugins to answer the user prompt.

## User prompt

Summarize this https://github.com/snwfdhmp/errlog using bullet points

{"plugin":"web_pilot","fn":"visitWebPage","payload":"{\"link\": \"https://github.com/snwfdhmp/errlog\"}","output":"{\"meta\":{\"og:description\":\"Reduce debugging time while programming Go. Use static and stack-trace analysis to determine which func call causes the error. - GitHub - snwfdhmp/errlog: Reduce debugging time while programming Go...\",\"og:site_name\":\"GitHub\",\"og:title\":\"GitHub - snwfdhmp/errlog: Reduce debugging time while programming Go. Use static and stack-trace analysis to determine which func call causes the error.\",\"og:type\":\"object\",\"og:url\":\"https://github.com/snwfdhmp/errlog\"},\"title\":\"\",\"content\":\"Skip to content\\nSign up\\nsnwfdhmp\\n/\\nerrlog\\nPublic\\nNotifications\\nFork 21\\n Star 450\\nCode\\nIssues\\nPull requests\\nDiscussions\\nActions\\nProjects\\nMore\\nsnwfdhmp/errlog\\n master \\nGo to file\\nCode\\nLatest commit\\nsnwfdhmp Update README.md\\n…\\nGit stats\\n 103\\nFiles\\nType\\nName\\nLatest commit message\\nCommit time\\nexamples\\nexamples: fix spelling error in example function\\n.gitignore\\nFix major bug when calling errlog.Debug multiple times in a row on th…\\nLICENSE\\nUpdated LICENSE to MIT and improve README\\nREADME.md\\nUpdate README.md\\ndefaults.go\\ndocumentation, refactoring\\nerrlog.go\\nbetter regexp now\\nlogger.go\\nFix major bug when calling errlog.Debug multiple times in a row on th…\\nregexp.go\\nMerge branch 'master' of https://github.com/snwfdhmp/errlog\\nutils.go\\nrefactoring, comments, and documentation\\nREADME.md\\nErrlog: reduce debugging time while programming \\nIntroduction\\nUse errlog to improve error logging and speed up debugging while you create amazing code :\\nHighlight source code\\nDetect and point out which func call is causing the fail\\nPretty stack trace\\nNo-op mode for production\\nEasy implementation, adaptable logger\\nPlug to any current project without changing you or your teammates habits\\nPlug to your current logging system\\nGo to\\nGet started\\nDocumentation\\nExamples\\nTweaking\\nFeedbacks\\nContributions\\nLicense\\nContributors\\nGet started\\nInstall\\ngo get github.com/snwfdhmp/errlog\\nUsage\\nReplace your if err != nil with if errlog.Debug(err) to add debugging informations.\\nfunc someFunc() {\\n //...\\n if errlog.Debug(err) { // will debug \\u0026 pass if err != nil, will ignore if err == nil\\n return\\n }\\n}\\nIn production, call errlog.DefaultLogger.Disable(true) to enable no-op (equivalent to if err != nil)\\nTweak as you need\\nYou can configure your own logger with the following options :\\ntype Config struct {\\n PrintFunc func(format string, data ...interface{}) //Printer func (eg: fmt.Printf)\\n LinesBefore int //How many lines to print *before* the error line when printing source code\\n LinesAfter int //How many lines to print *after* the error line when printing source code\\n PrintStack bool //Shall we print stack trace ? yes/no\\n PrintSource bool //Shall we print source code along ? yes/no\\n PrintError bool //Shall we print the error of Debug(err) ? yes/no\\n ExitOnDebugSuccess bool //Shall we os.Exit(1) after Debug has finished logging everything ? (doesn't happen when err is nil). Will soon be replaced by ExitFunc to enable panic-ing the current goroutine. (if you need this quick, please open an issue)\\n}\\nAs we don't yet update automatically this README immediately when we add new features, this definition may be outdated. (Last update: 2019/08/07) See the struct definition in godoc.org for the up to date definition\\nExample\\nTry yourself\\nName and link\\n Description \\nBasic\\nstandard usage, quick setup\\nCustom\\nguided configuration for fulfilling your needs\\nDisabled\\nhow to disable the logging \\u0026 debugging (eg: for production use)\\nFailing line far away\\nexample of finding the func call that caused the error while it is lines away from the errlog.Debug call\\nPretty stack trace\\npretty stack trace printing instead of debugging.\\nJust read\\nBasic example\\nNote that in the example, you will see some unuseful func. Those are made to generate additional stack trace levels for the sake of example\\nWe're going to use this sample program :\\nfunc main() {\\n fmt.Println(\\\"Program start\\\")\\n wrapingFunc() //call to our important function\\n fmt.Println(\\\"Program end\\\")\\n}\\nfunc wrapingFunc() {\\n someBigFunction() // call some func \\n}\\nfunc someBigFunction() {\\n someDumbFunction() // just random calls\\n someSmallFunction() // just random calls\\n someDumbFunction() // just random calls\\n // Here it can fail, so instead of `if err != nil` we use `errlog.Debug(err)`\\n if err := someNastyFunction(); errlog.Debug(err) {\\n return\\n }\\n someSmallFunction() // just random calls\\n someDumbFunction() // just random calls\\n}\\nfunc someSmallFunction() {\\n _ = fmt.Sprintf(\\\"I do things !\\\")\\n}\\nfunc someNastyFunction() error {\\n return errors.New(\\\"I'm failing for some reason\\\") // simulate an error\\n}\\nfunc someDumbFunction() bool {\\n return false // just random things\\n}\\nOutput\\nWe are able to detect and point out which line is causing the error.\\nCustom Configuration Example\\nLet's see what we can do with a custom configuration.\\ndebug := errlog.NewLogger(\\u0026errlog.Config{\\n // PrintFunc is of type `func (format string, data ...interface{})`\\n // so you can easily implement your own logger func.\\n // In this example, logrus is used, but any other logger can be used.\\n // Beware that you should add '\\\\n' at the end of format string when printing.\\n PrintFunc: logrus.Printf,\\n PrintSource: true, //Print the failing source code\\n LinesBefore: 2, //Print 2 lines before failing line\\n LinesAfter: 1, //Print 1 line after failing line\\n PrintError: true, //Print the error\\n PrintStack: false, //Don't print the stack trace\\n ExitOnDebugSuccess: true, //Exit if err\\n})\\nPlease note: This definition may be outdated. (Last update: 2019/08/07) See the struct definition in godoc.org for the up to date definition\\nOutput\\nWhen the failing func call is a few lines away\\nEven when the func call is a few lines away, there is no problem for finding it.\\nOutput\\nDocumentation\\nDocumentation can be found here : \\nFeedbacks\\nFeel free to open an issue for any feedback or suggestion.\\nI fix process issues quickly.\\nContributions\\nWe are happy to collaborate with you :\\nAsk for a new feature: Open an issue\\nAdd your feature: Open a PR\\nWhen submitting a PR, please apply Effective Go best practices. For more information: https://golang.org/doc/effective_go.html\\nLicense information\\nClick the following badge to open LICENSE information.\\nContributors\\nMajor\\nsnwfdhmp: Author and maintainer\\nchemidy: Added important badges\\nMinor fixes\\norisano\\nprogrammingman\\nAbout\\nReduce debugging time while programming Go. Use static and stack-trace analysis to determine which func call causes the error.\\nTopics\\ngolang error-log debugging-tool\\nResources\\n Readme\\nLicense\\n MIT license\\nStars\\n 450 stars\\nWatchers\\n 7 watching\\nForks\\n 21 forks\\nReport repository\\nReleases\\n 2 tags\\nPackages\\nNo packages published\\nContributors 6\\nLanguages\\nGo\\n100.0%\\nFooter\\n© 2023 GitHub, Inc.\\nFooter navigation\\nTerms\\nPrivacy\\nSecurity\\nStatus\\nDocs\\nContact GitHub\\nPricing\\nAPI\\nTraining\\nBlog\\nAbout\",\"links\":[{\"title\":\"Learn more about the CLI\",\"link\":\"https://cli.github.com/\"},{\"title\":\"examples: fix spelling error in example function\",\"link\":\"https://github.com/snwfdhmp/errlog/commit/1737dc2f4180789dbec460ef857ff44efe3e5b79\"},{\"title\":\"Fix major bug when calling errlog.Debug multiple times in a row on th…\",\"link\":\"https://github.com/snwfdhmp/errlog/commit/34052d24070a8e510dd7a8a58c68d34b27bc7489\"},{\"title\":\"Updated LICENSE to MIT and improve README\",\"link\":\"https://github.com/snwfdhmp/errlog/commit/cf10dbdee1ee4d39196813572f55e5c10ae363ba\"},{\"title\":\"Fix major bug when calling errlog.Debug multiple times in a row on th…\",\"link\":\"https://github.com/snwfdhmp/errlog/commit/34052d24070a8e510dd7a8a58c68d34b27bc7489\"}],\"rules\":[\"Use the language that the user previously used or the language requested by the user.\",\"Respond to the user's request, which may include asking questions or requesting specific actions (such as translation, rewriting, etc.), based on the provided content.\",\"If the user does not make a request, perform the following tasks: 1. Display the title in the user's language; 2. Summarize the article content into a brief and easily understandable paragraph; 3. Depending on the content, present three thought-provoking questions or insights with appropriate subheadings. For articles, follow this approach; for code, formulas, or content not suited for questioning, this step may be skipped.\"]}"}